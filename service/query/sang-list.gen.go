// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"YoruPlayer/entity"
)

func newSangList(db *gorm.DB, opts ...gen.DOOption) sangList {
	_sangList := sangList{}

	_sangList.sangListDo.UseDB(db, opts...)
	_sangList.sangListDo.UseModel(&entity.SangList{})

	tableName := _sangList.sangListDo.TableName()
	_sangList.ALL = field.NewAsterisk(tableName)
	_sangList.Id = field.NewInt64(tableName, "id")
	_sangList.Cover = field.NewString(tableName, "cover")
	_sangList.Creater = field.NewInt64(tableName, "creater")

	_sangList.fillFieldMap()

	return _sangList
}

type sangList struct {
	sangListDo

	ALL     field.Asterisk
	Id      field.Int64
	Cover   field.String
	Creater field.Int64

	fieldMap map[string]field.Expr
}

func (s sangList) Table(newTableName string) *sangList {
	s.sangListDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sangList) As(alias string) *sangList {
	s.sangListDo.DO = *(s.sangListDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sangList) updateTableName(table string) *sangList {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt64(table, "id")
	s.Cover = field.NewString(table, "cover")
	s.Creater = field.NewInt64(table, "creater")

	s.fillFieldMap()

	return s
}

func (s *sangList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sangList) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.Id
	s.fieldMap["cover"] = s.Cover
	s.fieldMap["creater"] = s.Creater
}

func (s sangList) clone(db *gorm.DB) sangList {
	s.sangListDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sangList) replaceDB(db *gorm.DB) sangList {
	s.sangListDo.ReplaceDB(db)
	return s
}

type sangListDo struct{ gen.DO }

type ISangListDo interface {
	gen.SubQuery
	Debug() ISangListDo
	WithContext(ctx context.Context) ISangListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISangListDo
	WriteDB() ISangListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISangListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISangListDo
	Not(conds ...gen.Condition) ISangListDo
	Or(conds ...gen.Condition) ISangListDo
	Select(conds ...field.Expr) ISangListDo
	Where(conds ...gen.Condition) ISangListDo
	Order(conds ...field.Expr) ISangListDo
	Distinct(cols ...field.Expr) ISangListDo
	Omit(cols ...field.Expr) ISangListDo
	Join(table schema.Tabler, on ...field.Expr) ISangListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISangListDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISangListDo
	Group(cols ...field.Expr) ISangListDo
	Having(conds ...gen.Condition) ISangListDo
	Limit(limit int) ISangListDo
	Offset(offset int) ISangListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISangListDo
	Unscoped() ISangListDo
	Create(values ...*entity.SangList) error
	CreateInBatches(values []*entity.SangList, batchSize int) error
	Save(values ...*entity.SangList) error
	First() (*entity.SangList, error)
	Take() (*entity.SangList, error)
	Last() (*entity.SangList, error)
	Find() ([]*entity.SangList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SangList, err error)
	FindInBatches(result *[]*entity.SangList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SangList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISangListDo
	Assign(attrs ...field.AssignExpr) ISangListDo
	Joins(fields ...field.RelationField) ISangListDo
	Preload(fields ...field.RelationField) ISangListDo
	FirstOrInit() (*entity.SangList, error)
	FirstOrCreate() (*entity.SangList, error)
	FindByPage(offset int, limit int) (result []*entity.SangList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISangListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sangListDo) Debug() ISangListDo {
	return s.withDO(s.DO.Debug())
}

func (s sangListDo) WithContext(ctx context.Context) ISangListDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sangListDo) ReadDB() ISangListDo {
	return s.Clauses(dbresolver.Read)
}

func (s sangListDo) WriteDB() ISangListDo {
	return s.Clauses(dbresolver.Write)
}

func (s sangListDo) Session(config *gorm.Session) ISangListDo {
	return s.withDO(s.DO.Session(config))
}

func (s sangListDo) Clauses(conds ...clause.Expression) ISangListDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sangListDo) Returning(value interface{}, columns ...string) ISangListDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sangListDo) Not(conds ...gen.Condition) ISangListDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sangListDo) Or(conds ...gen.Condition) ISangListDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sangListDo) Select(conds ...field.Expr) ISangListDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sangListDo) Where(conds ...gen.Condition) ISangListDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sangListDo) Order(conds ...field.Expr) ISangListDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sangListDo) Distinct(cols ...field.Expr) ISangListDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sangListDo) Omit(cols ...field.Expr) ISangListDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sangListDo) Join(table schema.Tabler, on ...field.Expr) ISangListDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sangListDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISangListDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sangListDo) RightJoin(table schema.Tabler, on ...field.Expr) ISangListDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sangListDo) Group(cols ...field.Expr) ISangListDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sangListDo) Having(conds ...gen.Condition) ISangListDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sangListDo) Limit(limit int) ISangListDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sangListDo) Offset(offset int) ISangListDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sangListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISangListDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sangListDo) Unscoped() ISangListDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sangListDo) Create(values ...*entity.SangList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sangListDo) CreateInBatches(values []*entity.SangList, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sangListDo) Save(values ...*entity.SangList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sangListDo) First() (*entity.SangList, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SangList), nil
	}
}

func (s sangListDo) Take() (*entity.SangList, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SangList), nil
	}
}

func (s sangListDo) Last() (*entity.SangList, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SangList), nil
	}
}

func (s sangListDo) Find() ([]*entity.SangList, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SangList), err
}

func (s sangListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SangList, err error) {
	buf := make([]*entity.SangList, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sangListDo) FindInBatches(result *[]*entity.SangList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sangListDo) Attrs(attrs ...field.AssignExpr) ISangListDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sangListDo) Assign(attrs ...field.AssignExpr) ISangListDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sangListDo) Joins(fields ...field.RelationField) ISangListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sangListDo) Preload(fields ...field.RelationField) ISangListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sangListDo) FirstOrInit() (*entity.SangList, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SangList), nil
	}
}

func (s sangListDo) FirstOrCreate() (*entity.SangList, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SangList), nil
	}
}

func (s sangListDo) FindByPage(offset int, limit int) (result []*entity.SangList, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sangListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sangListDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sangListDo) Delete(models ...*entity.SangList) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sangListDo) withDO(do gen.Dao) *sangListDo {
	s.DO = *do.(*gen.DO)
	return s
}

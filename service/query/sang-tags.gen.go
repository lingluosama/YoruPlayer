// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"YoruPlayer/entity/Db"
)

func newSangToTag(db *gorm.DB, opts ...gen.DOOption) sangToTag {
	_sangToTag := sangToTag{}

	_sangToTag.sangToTagDo.UseDB(db, opts...)
	_sangToTag.sangToTagDo.UseModel(&Db.SangToTag{})

	tableName := _sangToTag.sangToTagDo.TableName()
	_sangToTag.ALL = field.NewAsterisk(tableName)
	_sangToTag.Id = field.NewInt64(tableName, "id")
	_sangToTag.Tag = field.NewString(tableName, "tag")
	_sangToTag.Sid = field.NewInt64(tableName, "sid")

	_sangToTag.fillFieldMap()

	return _sangToTag
}

type sangToTag struct {
	sangToTagDo

	ALL field.Asterisk
	Id  field.Int64
	Tag field.String
	Sid field.Int64

	fieldMap map[string]field.Expr
}

func (s sangToTag) Table(newTableName string) *sangToTag {
	s.sangToTagDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sangToTag) As(alias string) *sangToTag {
	s.sangToTagDo.DO = *(s.sangToTagDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sangToTag) updateTableName(table string) *sangToTag {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewInt64(table, "id")
	s.Tag = field.NewString(table, "tag")
	s.Sid = field.NewInt64(table, "sid")

	s.fillFieldMap()

	return s
}

func (s *sangToTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sangToTag) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.Id
	s.fieldMap["tag"] = s.Tag
	s.fieldMap["sid"] = s.Sid
}

func (s sangToTag) clone(db *gorm.DB) sangToTag {
	s.sangToTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sangToTag) replaceDB(db *gorm.DB) sangToTag {
	s.sangToTagDo.ReplaceDB(db)
	return s
}

type sangToTagDo struct{ gen.DO }

type ISangToTagDo interface {
	gen.SubQuery
	Debug() ISangToTagDo
	WithContext(ctx context.Context) ISangToTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISangToTagDo
	WriteDB() ISangToTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISangToTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISangToTagDo
	Not(conds ...gen.Condition) ISangToTagDo
	Or(conds ...gen.Condition) ISangToTagDo
	Select(conds ...field.Expr) ISangToTagDo
	Where(conds ...gen.Condition) ISangToTagDo
	Order(conds ...field.Expr) ISangToTagDo
	Distinct(cols ...field.Expr) ISangToTagDo
	Omit(cols ...field.Expr) ISangToTagDo
	Join(table schema.Tabler, on ...field.Expr) ISangToTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISangToTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISangToTagDo
	Group(cols ...field.Expr) ISangToTagDo
	Having(conds ...gen.Condition) ISangToTagDo
	Limit(limit int) ISangToTagDo
	Offset(offset int) ISangToTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISangToTagDo
	Unscoped() ISangToTagDo
	Create(values ...*Db.SangToTag) error
	CreateInBatches(values []*Db.SangToTag, batchSize int) error
	Save(values ...*Db.SangToTag) error
	First() (*Db.SangToTag, error)
	Take() (*Db.SangToTag, error)
	Last() (*Db.SangToTag, error)
	Find() ([]*Db.SangToTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*Db.SangToTag, err error)
	FindInBatches(result *[]*Db.SangToTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*Db.SangToTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISangToTagDo
	Assign(attrs ...field.AssignExpr) ISangToTagDo
	Joins(fields ...field.RelationField) ISangToTagDo
	Preload(fields ...field.RelationField) ISangToTagDo
	FirstOrInit() (*Db.SangToTag, error)
	FirstOrCreate() (*Db.SangToTag, error)
	FindByPage(offset int, limit int) (result []*Db.SangToTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISangToTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sangToTagDo) Debug() ISangToTagDo {
	return s.withDO(s.DO.Debug())
}

func (s sangToTagDo) WithContext(ctx context.Context) ISangToTagDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sangToTagDo) ReadDB() ISangToTagDo {
	return s.Clauses(dbresolver.Read)
}

func (s sangToTagDo) WriteDB() ISangToTagDo {
	return s.Clauses(dbresolver.Write)
}

func (s sangToTagDo) Session(config *gorm.Session) ISangToTagDo {
	return s.withDO(s.DO.Session(config))
}

func (s sangToTagDo) Clauses(conds ...clause.Expression) ISangToTagDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sangToTagDo) Returning(value interface{}, columns ...string) ISangToTagDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sangToTagDo) Not(conds ...gen.Condition) ISangToTagDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sangToTagDo) Or(conds ...gen.Condition) ISangToTagDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sangToTagDo) Select(conds ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sangToTagDo) Where(conds ...gen.Condition) ISangToTagDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sangToTagDo) Order(conds ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sangToTagDo) Distinct(cols ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sangToTagDo) Omit(cols ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sangToTagDo) Join(table schema.Tabler, on ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sangToTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sangToTagDo) RightJoin(table schema.Tabler, on ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sangToTagDo) Group(cols ...field.Expr) ISangToTagDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sangToTagDo) Having(conds ...gen.Condition) ISangToTagDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sangToTagDo) Limit(limit int) ISangToTagDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sangToTagDo) Offset(offset int) ISangToTagDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sangToTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISangToTagDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sangToTagDo) Unscoped() ISangToTagDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sangToTagDo) Create(values ...*Db.SangToTag) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sangToTagDo) CreateInBatches(values []*Db.SangToTag, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sangToTagDo) Save(values ...*Db.SangToTag) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sangToTagDo) First() (*Db.SangToTag, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToTag), nil
	}
}

func (s sangToTagDo) Take() (*Db.SangToTag, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToTag), nil
	}
}

func (s sangToTagDo) Last() (*Db.SangToTag, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToTag), nil
	}
}

func (s sangToTagDo) Find() ([]*Db.SangToTag, error) {
	result, err := s.DO.Find()
	return result.([]*Db.SangToTag), err
}

func (s sangToTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*Db.SangToTag, err error) {
	buf := make([]*Db.SangToTag, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sangToTagDo) FindInBatches(result *[]*Db.SangToTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sangToTagDo) Attrs(attrs ...field.AssignExpr) ISangToTagDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sangToTagDo) Assign(attrs ...field.AssignExpr) ISangToTagDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sangToTagDo) Joins(fields ...field.RelationField) ISangToTagDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sangToTagDo) Preload(fields ...field.RelationField) ISangToTagDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sangToTagDo) FirstOrInit() (*Db.SangToTag, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToTag), nil
	}
}

func (s sangToTagDo) FirstOrCreate() (*Db.SangToTag, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToTag), nil
	}
}

func (s sangToTagDo) FindByPage(offset int, limit int) (result []*Db.SangToTag, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sangToTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sangToTagDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sangToTagDo) Delete(models ...*Db.SangToTag) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sangToTagDo) withDO(do gen.Dao) *sangToTagDo {
	s.DO = *do.(*gen.DO)
	return s
}

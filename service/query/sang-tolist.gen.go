// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"YoruPlayer/entity/Db"
)

func newSangToList(db *gorm.DB, opts ...gen.DOOption) sangToList {
	_sangToList := sangToList{}

	_sangToList.sangToListDo.UseDB(db, opts...)
	_sangToList.sangToListDo.UseModel(&Db.SangToList{})

	tableName := _sangToList.sangToListDo.TableName()
	_sangToList.ALL = field.NewAsterisk(tableName)
	_sangToList.LID = field.NewInt64(tableName, "lid")
	_sangToList.SID = field.NewInt64(tableName, "sid")

	_sangToList.fillFieldMap()

	return _sangToList
}

type sangToList struct {
	sangToListDo

	ALL field.Asterisk
	LID field.Int64
	SID field.Int64

	fieldMap map[string]field.Expr
}

func (s sangToList) Table(newTableName string) *sangToList {
	s.sangToListDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sangToList) As(alias string) *sangToList {
	s.sangToListDo.DO = *(s.sangToListDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sangToList) updateTableName(table string) *sangToList {
	s.ALL = field.NewAsterisk(table)
	s.LID = field.NewInt64(table, "lid")
	s.SID = field.NewInt64(table, "sid")

	s.fillFieldMap()

	return s
}

func (s *sangToList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sangToList) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["lid"] = s.LID
	s.fieldMap["sid"] = s.SID
}

func (s sangToList) clone(db *gorm.DB) sangToList {
	s.sangToListDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sangToList) replaceDB(db *gorm.DB) sangToList {
	s.sangToListDo.ReplaceDB(db)
	return s
}

type sangToListDo struct{ gen.DO }

type ISangToListDo interface {
	gen.SubQuery
	Debug() ISangToListDo
	WithContext(ctx context.Context) ISangToListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISangToListDo
	WriteDB() ISangToListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISangToListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISangToListDo
	Not(conds ...gen.Condition) ISangToListDo
	Or(conds ...gen.Condition) ISangToListDo
	Select(conds ...field.Expr) ISangToListDo
	Where(conds ...gen.Condition) ISangToListDo
	Order(conds ...field.Expr) ISangToListDo
	Distinct(cols ...field.Expr) ISangToListDo
	Omit(cols ...field.Expr) ISangToListDo
	Join(table schema.Tabler, on ...field.Expr) ISangToListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISangToListDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISangToListDo
	Group(cols ...field.Expr) ISangToListDo
	Having(conds ...gen.Condition) ISangToListDo
	Limit(limit int) ISangToListDo
	Offset(offset int) ISangToListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISangToListDo
	Unscoped() ISangToListDo
	Create(values ...*Db.SangToList) error
	CreateInBatches(values []*Db.SangToList, batchSize int) error
	Save(values ...*Db.SangToList) error
	First() (*Db.SangToList, error)
	Take() (*Db.SangToList, error)
	Last() (*Db.SangToList, error)
	Find() ([]*Db.SangToList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*Db.SangToList, err error)
	FindInBatches(result *[]*Db.SangToList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*Db.SangToList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISangToListDo
	Assign(attrs ...field.AssignExpr) ISangToListDo
	Joins(fields ...field.RelationField) ISangToListDo
	Preload(fields ...field.RelationField) ISangToListDo
	FirstOrInit() (*Db.SangToList, error)
	FirstOrCreate() (*Db.SangToList, error)
	FindByPage(offset int, limit int) (result []*Db.SangToList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISangToListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sangToListDo) Debug() ISangToListDo {
	return s.withDO(s.DO.Debug())
}

func (s sangToListDo) WithContext(ctx context.Context) ISangToListDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sangToListDo) ReadDB() ISangToListDo {
	return s.Clauses(dbresolver.Read)
}

func (s sangToListDo) WriteDB() ISangToListDo {
	return s.Clauses(dbresolver.Write)
}

func (s sangToListDo) Session(config *gorm.Session) ISangToListDo {
	return s.withDO(s.DO.Session(config))
}

func (s sangToListDo) Clauses(conds ...clause.Expression) ISangToListDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sangToListDo) Returning(value interface{}, columns ...string) ISangToListDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sangToListDo) Not(conds ...gen.Condition) ISangToListDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sangToListDo) Or(conds ...gen.Condition) ISangToListDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sangToListDo) Select(conds ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sangToListDo) Where(conds ...gen.Condition) ISangToListDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sangToListDo) Order(conds ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sangToListDo) Distinct(cols ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sangToListDo) Omit(cols ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sangToListDo) Join(table schema.Tabler, on ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sangToListDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sangToListDo) RightJoin(table schema.Tabler, on ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sangToListDo) Group(cols ...field.Expr) ISangToListDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sangToListDo) Having(conds ...gen.Condition) ISangToListDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sangToListDo) Limit(limit int) ISangToListDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sangToListDo) Offset(offset int) ISangToListDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sangToListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISangToListDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sangToListDo) Unscoped() ISangToListDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sangToListDo) Create(values ...*Db.SangToList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sangToListDo) CreateInBatches(values []*Db.SangToList, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sangToListDo) Save(values ...*Db.SangToList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sangToListDo) First() (*Db.SangToList, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToList), nil
	}
}

func (s sangToListDo) Take() (*Db.SangToList, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToList), nil
	}
}

func (s sangToListDo) Last() (*Db.SangToList, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToList), nil
	}
}

func (s sangToListDo) Find() ([]*Db.SangToList, error) {
	result, err := s.DO.Find()
	return result.([]*Db.SangToList), err
}

func (s sangToListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*Db.SangToList, err error) {
	buf := make([]*Db.SangToList, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sangToListDo) FindInBatches(result *[]*Db.SangToList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sangToListDo) Attrs(attrs ...field.AssignExpr) ISangToListDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sangToListDo) Assign(attrs ...field.AssignExpr) ISangToListDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sangToListDo) Joins(fields ...field.RelationField) ISangToListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sangToListDo) Preload(fields ...field.RelationField) ISangToListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sangToListDo) FirstOrInit() (*Db.SangToList, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToList), nil
	}
}

func (s sangToListDo) FirstOrCreate() (*Db.SangToList, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*Db.SangToList), nil
	}
}

func (s sangToListDo) FindByPage(offset int, limit int) (result []*Db.SangToList, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sangToListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sangToListDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sangToListDo) Delete(models ...*Db.SangToList) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sangToListDo) withDO(do gen.Dao) *sangToListDo {
	s.DO = *do.(*gen.DO)
	return s
}
